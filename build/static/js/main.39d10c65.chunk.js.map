{"version":3,"sources":["components/SearchBar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","hooks/useVideos.js","components/App.js","index.js"],"names":["SearchBar","onFormSubmit","useState","term","setTerm","className","onSubmit","e","preventDefault","type","name","placeholder","value","onChange","target","VideoItem","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedList","map","index","key","id","videoId","VideoDetail","videoSrc","description","useVideos","defaultSearchTerm","setVideos","useEffect","search","console","log","axios","get","then","response","catch","err","App","selectedVideo","setSelectedVideo","ReactDOM","render","document","getElementById"],"mappings":"6MA+BeA,EA7BG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,KAWtC,OACE,yBAAKC,UAAU,yBACb,0BAAMA,UAAU,UAAUC,SATb,SAACC,GAChBA,EAAEC,iBAGFP,EAAaE,KAMT,yBAAKE,UAAU,SACb,+CACA,2BACEI,KAAK,OACLC,KAAK,OACLC,YAAY,eACZC,MAAOT,EACPU,SAAU,SAACN,GAAD,OAAOH,EAAQG,EAAEO,OAAOF,cCL/BG,G,MAfG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC1B,OACE,yBAAKZ,UAAU,kBAAkBa,QAAS,kBAAMD,EAAcD,KAC5D,yBACEX,UAAU,WACVc,IAAKH,EAAMI,QAAQC,WAAWC,OAAOC,IACrCC,IAAKR,EAAMI,QAAQK,QAErB,yBAAKpB,UAAU,WACb,yBAAKA,UAAU,UAAUW,EAAMI,QAAQK,WCKhCC,EAdG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAAQV,EAAoB,EAApBA,cACrBW,EAAeD,EAAOE,KAAI,SAACb,EAAOc,GACtC,OACE,kBAAC,EAAD,CACEC,IAAKf,EAAMgB,GAAGC,SAAWH,EACzBb,cAAeA,EACfD,MAAOA,OAKb,OAAO,yBAAKX,UAAU,2BAA2BuB,ICSpCM,EArBK,SAAC,GAAe,IAAblB,EAAY,EAAZA,MAErB,IAAKA,EACH,OAAO,0CAGT,IAAMmB,EAAQ,wCAAoCnB,EAAMgB,GAAGC,SAE3D,OACE,6BACE,yBAAK5B,UAAU,YACb,4BAAQc,IAAKgB,EAAUV,MAAOT,EAAMI,QAAQK,SAE9C,yBAAKpB,UAAU,cACb,wBAAIA,UAAU,aAAaW,EAAMI,QAAQK,OACzC,2BAAIT,EAAMI,QAAQgB,gB,iBC+GXC,EA3CG,SAACC,GAAuB,IAAD,EACXpC,mBAAS,IADE,mBAChCyB,EADgC,KACxBY,EADwB,KAIvCC,qBAAU,WACRC,EAAOH,KACN,CAACA,IAGJ,IAAMG,EAAS,SAACtC,GACduC,QAAQC,IAAI,2DAEZC,IACGC,IAAI,iCACJC,MAAK,SAACC,GAAD,OAAcR,EAAUQ,MAC7BC,OAAM,SAACC,GAAD,OAASP,QAAQC,IAAI,SAAUM,OAwB1C,MAAO,CAACtB,EAAQc,ICtFHS,EA/BH,WAAO,IAAD,EAC0BhD,mBAAS,MADnC,mBACTiD,EADS,KACMC,EADN,OAESf,EAAU,aAFnB,mBAETV,EAFS,KAEDc,EAFC,KAShB,OAJAD,qBAAU,WACRY,EAAiBzB,EAAO,MACvB,CAACA,IAGF,yBAAKtB,UAAU,gBACb,kBAAC,EAAD,CAAWJ,aAAcwC,IAEzB,yBAAKpC,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAaW,MAAOmC,KAEtB,yBAAK9C,UAAU,oBACb,kBAAC,EAAD,CAEEY,cAAemC,EACfzB,OAAQA,SCzBtB0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.39d10c65.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst SearchBar = ({ onFormSubmit }) => {\n  const [term, setTerm] = useState(\"\");\n\n  // Handler form submit\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Callback from parent component that will initiate API Search\n    onFormSubmit(term);\n  };\n\n  return (\n    <div className=\"search-bar ui segment\">\n      <form className=\"ui form\" onSubmit={onSubmit}>\n        <div className=\"field\">\n          <label>Video Search</label>\n          <input\n            type=\"text\"\n            name=\"term\"\n            placeholder=\"Search Video\"\n            value={term}\n            onChange={(e) => setTerm(e.target.value)}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import \"./VideoItem.css\";\nimport React from \"react\";\n\nconst VideoItem = ({ video, onVideoSelect }) => {\n  return (\n    <div className=\"video-item item\" onClick={() => onVideoSelect(video)}>\n      <img\n        className=\"ui image\"\n        src={video.snippet.thumbnails.medium.url}\n        alt={video.snippet.title}\n      />\n      <div className=\"content\">\n        <div className=\"header\">{video.snippet.title}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoItem;\n","import React from \"react\";\nimport VideoItem from \"./VideoItem\";\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n  const renderedList = videos.map((video, index) => {\n    return (\n      <VideoItem\n        key={video.id.videoId || index}\n        onVideoSelect={onVideoSelect}\n        video={video}\n      />\n    );\n  });\n\n  return <div className=\"ui relaxed divided list\">{renderedList}</div>;\n};\n\nexport default VideoList;\n","import React from \"react\";\n\nconst VideoDetail = ({ video }) => {\n  // 'selectedVideo' is initialized to null.  It cannot be initialized to empty object {} because the video object is from the API.\n  if (!video) {\n    return <div>Loading..</div>;\n  }\n\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n\n  return (\n    <div>\n      <div className=\"ui embed\">\n        <iframe src={videoSrc} title={video.snippet.title} />\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p>{video.snippet.description}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoDetail;\n","// // 2 Reference before using Netlify's serverless function\n// import { useState, useEffect } from \"react\";\n// import youtube from \"../apis/youtube\";\n// // import { API_KEY } from \"../apis/video-hooks-api\"; // No longer using.  Instead API calls will be made via Netlify's ServerLess functions.\n\n// // console.developers.google.com > YouTube Data API v3\n// const KEY = \"AIzaSyCVdCbdit08UrBt2ky0pOcHlaCtKORekdQ\";\n\n// const useVideos = (defaultSearchTerm) => {\n//   const [videos, setVideos] = useState([]);\n\n//   // Initial API search to return a list of videos\n//   useEffect(() => {\n//     search(defaultSearchTerm);\n//   }, [defaultSearchTerm]);\n\n//   // Callback - Pass down to SearchBar.  Update videos list.\n//   const search = async (term) => {\n//     const response = await youtube.get(\"/search\", {\n//       params: {\n//         q: term,\n//         part: \"snippet\",\n//         maxResult: 5,\n//         // type: 'video'\n//         key: KEY,\n//       },\n//     });\n\n//     setVideos(response.data.items);\n//   };\n\n//   return [videos, search]; // Like useState() convention. 'videos' is our state.  'search' is our functiom we can use to get a list of videos.\n//   // return {videos, onTermSubmit} // JS convention works as well\n// };\n\n// export default useVideos;\n\n/* 1 Reference orinigal only\n  import { useState, useEffect } from \"react\";\n  import youtube from \"../apis/youtube\";\n  import { API_KEY } from \"../apis/video-hooks-api\"; // No longer using.  Instead API calls will be made via Netlify's ServerLess functions.\n\n  // console.developers.google.com > YouTube Data API v3\n  const KEY = API_KEY;\n\n  const useVideos = (defaultSearchTerm) => {\n    const [videos, setVideos] = useState([]);\n\n    // Initial API search to return a list of videos\n    useEffect(() => {\n      search(defaultSearchTerm);\n    }, [defaultSearchTerm]);\n\n    // Callback - Pass down to SearchBar.  Update videos list.\n    const search = async (term) => {\n      const response = await youtube.get(\"/search\", {\n        params: {\n          q: term,\n          part: \"snippet\",\n          maxResult: 5,\n          // type: 'video'\n          key: KEY,\n        },\n      });\n\n      setVideos(response.data.items);\n    };\n\n    return [videos, search]; // Like useState() convention. 'videos' is our state.  'search' is our functiom we can use to get a list of videos.\n    // return {videos, onTermSubmit} // JS convention works as well\n  };\n\n  export default useVideos;\n*/\n\n// 3 Netlify's serverless function - Reference only\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n\n// import youtube from \"../apis/youtube\";\n// import { API_KEY } from \"../apis/video-hooks-api\"; // No longer using.  Instead API calls will be made via Netlify's ServerLess functions.\n\n// console.developers.google.com > YouTube Data API v3\n// const KEY = API_KEY;\n\nconst useVideos = (defaultSearchTerm) => {\n  const [videos, setVideos] = useState([]);\n\n  // Initial API search to return a list of videos\n  useEffect(() => {\n    search(defaultSearchTerm);\n  }, [defaultSearchTerm]);\n\n  // Callback - Pass down to SearchBar.  Update videos list.\n  const search = (term) => {\n    console.log(\"Perform api call from our app dev http://localhost:3000\");\n\n    axios\n      .get(\"/.netlify/functions/getvideos\")\n      .then((response) => setVideos(response))\n      .catch((err) => console.log(\"Error:\", err));\n    // , {\n    // crossDomain: true,\n    // headers: { \"Content-Type\": \"text/plain\" },\n    // withCredentials: true,\n    // credentials: \"same-origin\",\n    // })\n\n    // .get(\"/.netlify/functions/getvideos\") // production\n\n    // const response = await youtube.get(\"/search\", {\n    //   params: {\n    //     q: term,\n    //     part: \"snippet\",\n    //     maxResult: 5,\n    //     // type: 'video'\n    //     key: KEY,\n    //   },\n    // });\n\n    // setVideos(response.data.items);\n    // setVideos(response);\n  };\n\n  return [videos, search]; // Like useState() convention. 'videos' is our state.  'search' is our functiom we can use to get a list of videos.\n  // return {videos, onTermSubmit} // JS convention works as well\n};\n\nexport default useVideos;\n","import React, { useState, useEffect } from \"react\";\nimport SearchBar from \"./SearchBar\";\n// import youtube from \"../apis/youtube\";\nimport VideoList from \"./VideoList\";\nimport VideoDetail from \"./VideoDetail\";\nimport useVideos from \"../hooks/useVideos\";\n\nconst App = () => {\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [videos, search] = useVideos(\"buildings\");\n\n  // Everytime we get a new list of videos we want to select the first from the list to display\n  useEffect(() => {\n    setSelectedVideo(videos[0]);\n  }, [videos]);\n\n  return (\n    <div className=\"ui container\">\n      <SearchBar onFormSubmit={search} />\n\n      <div className=\"ui grid\">\n        <div className=\"ui row\">\n          <div className=\"eleven wide column\">\n            <VideoDetail video={selectedVideo} />\n          </div>\n          <div className=\"five wide column\">\n            <VideoList\n              // onVideoSelect={(video) => setSelectedVideo(video)}\n              onVideoSelect={setSelectedVideo}\n              videos={videos}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}